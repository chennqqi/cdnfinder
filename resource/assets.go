// Code generated by go-bindata.
// sources:
// assets/cnamechain.json
// assets/resourcefinder.js
// DO NOT EDIT!

package resource

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCnamechainJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x96\xcf\x6e\xe3\x36\x10\xc6\xef\x79\x0a\xc1\x87\x9e\xd6\x2a\x16\x39\xe4\x9c\x38\x6d\x13\x6c\xd6\x68\x9b\x14\x8b\x36\xc8\x61\x44\x8e\x24\xc2\xd4\xd0\x25\x47\x76\x94\xa7\x5f\x48\x96\xc8\xf1\xdf\xdc\x3c\xdf\xf7\x23\x39\x24\x67\x68\xbd\x5e\x65\xd9\xeb\x2c\x57\xd6\x20\x71\xc8\xb9\xf5\x85\x2b\x3a\xc6\x90\x13\xf2\xec\x4b\x36\x7b\xe9\x95\xbb\x5e\x99\xbd\x7d\xd9\xc1\x09\x9a\x2b\x4d\xb9\x72\xcd\x19\x10\xca\xf7\x1e\x18\x67\x12\x51\x04\x56\xd0\x80\x99\x80\xdb\x21\x3a\x30\x51\x57\x78\x1e\xd0\x14\x2e\x8e\x66\x54\x35\x39\xeb\x2a\x83\x61\x4a\xf4\x00\xac\x82\x2d\x72\x2e\x14\xa8\x1a\x23\x62\x4d\x03\x0d\x44\x46\x59\xd7\xea\xd2\x3b\xe2\xb8\x5a\x03\x1f\x8e\xb2\x45\x34\xd2\xc2\x04\xb4\xc2\xf1\x60\xf2\xc2\x0f\xf4\xa0\x25\x84\x79\xae\x03\xc4\xb9\x5e\x7e\x79\x49\xde\x87\x71\x24\x4e\xed\xb6\x8f\xa3\x5b\xa0\x6d\x2b\x10\xa7\x7e\x37\x08\x8b\xfb\x65\x42\x6c\x8b\x35\x30\x21\x6f\x9d\x5f\x45\xce\xb6\x98\x3d\x00\x67\xcb\x9d\x1e\xf1\xd0\x05\xc6\x46\x2c\xf8\x9b\xae\x70\x01\x21\x6d\x68\x38\x99\xd2\x76\x13\xb0\x18\xe3\x04\x68\xba\xb9\x89\xee\xfd\xf2\xe6\xe6\xc0\x72\xbe\x3a\xb6\xd6\x40\x5c\xa3\x17\x7b\x59\xdc\x8f\xc9\x05\x39\xbe\x52\x62\xea\x43\xbf\x52\x22\xf3\xb3\xbe\xa2\xf3\xd3\x9b\xb2\xcb\x8d\x1b\x7d\x53\x8a\x5d\xa9\xa1\x32\xa6\xdc\x6a\x43\x30\xec\xfc\x10\x98\x16\x3f\x01\x5c\xef\x8a\xea\x02\xd1\x4b\x9f\x42\xd7\x72\x8f\xc7\xbe\x7d\xef\xbb\x40\xe6\xb9\x44\x5e\x20\x31\xfa\x74\xcb\x6b\x44\xad\x04\xf7\xd7\x3f\xb7\xcb\x97\xc7\xa7\x5f\xcf\xf0\xcd\x76\x28\x79\x71\x39\x9f\x0c\xd8\x75\x88\x05\x1f\x7b\x68\x11\x95\x53\xd0\xb4\x9d\x63\xa8\x6f\x78\x05\x81\x2f\x95\x24\x68\xca\x4f\x1a\x5b\x50\x67\x8c\xf5\x19\xa3\x84\xc0\xa9\xb6\x7f\x1f\xa2\x03\x33\x5d\xf2\x81\x5d\x39\x57\x59\x1c\xe6\xfd\x63\xf8\x39\x39\x3b\x23\x74\xa4\x8d\x02\x36\x8e\x4e\x30\x9d\x6b\xb9\x2d\x4e\x8d\x1e\xe7\x6d\x03\x7a\xe5\x88\x91\x78\x3a\xd3\x03\xce\xe6\xda\xb5\x85\x45\x65\x8d\x5a\x4d\x39\xee\x33\x3a\xaf\x76\x97\x38\x58\x73\xe5\xc4\x49\xd7\xa6\x40\x4f\x46\x3e\x27\x0f\xa3\x94\x98\xad\xb8\x87\x07\x53\xd5\x5b\x43\x3a\x35\x90\x21\x05\x6b\xf1\x08\x3f\xf6\x71\x68\x2d\x08\x22\x28\x82\x06\x13\x11\x18\x3c\xf7\x4f\xb2\x92\x10\x6d\x3f\x21\x18\x3d\xc1\x5a\x64\xf3\x38\x4a\x91\x59\xbd\x8b\x9d\x7c\xc3\x4e\xbe\x8a\x36\xc8\x8d\x3c\x21\x04\xfc\x81\x45\x26\x91\xd2\x39\x5e\x7b\x93\xde\xf8\x27\xdc\xa0\xbd\x4e\x53\x58\xda\xea\xe8\x99\x06\xad\xa9\x6a\x16\xb6\x38\x87\x63\x9b\x90\x35\x81\xfc\xc3\xfc\x0e\xef\x72\xf9\x11\x08\xc1\x5e\x04\xce\x98\x81\x41\xad\xd6\xc0\xb5\xe8\xf1\xe7\x5e\xfb\x13\xb8\x4e\x6d\x4d\x72\x7d\xd4\x06\xc8\x6d\xf6\xee\x8a\x61\x2a\xb9\x71\x27\xdf\x8d\xf7\xce\x67\x8f\x0d\x54\xa9\x72\x9a\x41\x9c\x9b\x5e\xbc\x08\x2a\x58\xcf\x1b\x63\x2e\x32\xbe\x4f\xea\xeb\x94\xd5\xdf\x58\x5a\x54\x8c\x3a\x3b\x7a\xad\x83\x69\xd6\x16\xc5\x35\x3e\x0f\xc2\xde\x25\x86\xad\x29\x59\xce\xf7\xdc\x0b\x47\x44\x40\xbf\xc1\x3d\xe4\xb9\x57\x0e\x3e\x0a\xc0\x15\xe0\xe2\xf7\xcd\x10\xc9\xbf\x8e\xbc\x30\x5c\x79\xd8\x18\xee\x12\xc4\x90\x29\xd7\x34\x2d\x8d\x9d\xbf\xf7\x67\x93\x33\x5a\x2c\x5d\xef\xc5\x11\x51\x89\xe0\xc6\xe5\x4d\x40\x45\xb1\xd8\x7e\x18\xd2\x6e\x1b\xb2\xdb\x8f\x56\xb4\x2f\x74\x5f\xf3\x22\xef\xa0\x76\x31\xc7\x7f\xfb\x20\x02\x9d\x69\xaa\xfc\x58\xfe\x40\x92\x1f\x55\xff\xed\xc2\xf4\xfd\x30\x17\x27\x7c\xd7\x12\xed\xf5\xd1\x2a\x74\xad\x2c\xa2\x6f\x86\xaa\xe0\xca\x54\xe7\xff\x1b\x32\xad\x28\xc2\x21\x9e\xbd\x5d\xbd\x5d\xfd\x0c\x00\x00\xff\xff\xce\x38\x77\xed\x6b\x0a\x00\x00"

func assetsCnamechainJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsCnamechainJson,
		"assets/cnamechain.json",
	)
}

func assetsCnamechainJson() (*asset, error) {
	bytes, err := assetsCnamechainJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cnamechain.json", size: 2667, mode: os.FileMode(438), modTime: time.Unix(1567505022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcefinderJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x57\x6f\x6f\xdb\xb6\x13\x7e\x1f\x20\xdf\xe1\xe2\x1f\x50\x4b\x88\x2d\x25\xbf\x62\xc3\x16\x4f\x0b\x86\xad\x43\x3b\x74\x2d\x90\xec\x5d\xe6\x02\xb4\x74\x96\x98\x50\xa4\xca\x3f\x76\xbd\xcc\xdf\x7d\x20\x45\x4a\xb4\xdb\xba\x7e\x65\x1f\x8f\xbc\xe3\x73\xcf\x3d\x47\x6f\x88\x04\x3d\x03\x52\x55\x12\x95\x5a\x9c\x9f\x59\x83\x44\x25\x8c\x2c\x51\x41\x01\xcf\x7b\x6f\x54\x3b\xa5\xb1\x85\x02\x24\x7e\x34\x54\x62\x32\xed\x2d\xd3\x74\x71\x7e\xd6\xbb\xd4\xa8\x5f\x0b\xa5\x39\x69\x11\x0a\x58\x1b\x5e\x6a\x2a\x78\xa2\xb4\x4c\xe1\xf9\xfc\x0c\x20\xcf\x41\x69\xc1\x18\x72\x58\x4b\xd1\x42\xa3\x75\x77\x93\xe7\x2b\x24\xb2\x52\xa5\x24\xba\x6c\x50\xaa\xac\x14\x6d\xfe\x28\x8c\xe4\x84\xe5\x46\x51\x5e\xcf\x1f\xc9\x86\xa8\x52\xd2\x4e\xcf\xb5\x98\xd7\xa8\xe7\xba\xc1\x79\xe3\x83\xcd\xc5\x7a\x4e\xe6\x46\x32\x1b\x43\xcb\x9d\x8b\x05\xd0\x5f\x05\x0a\xe0\xb8\x85\x3b\xac\x5f\x7d\xea\x92\xe9\x87\xe4\xf6\x66\xfd\x6f\xa3\x53\xdd\x25\xb7\x37\x2a\xbd\xfd\xfb\x26\xcf\x93\x87\x0f\xf9\xf2\x32\x9d\xce\x60\x4a\xfb\x0b\xd9\xfd\x12\xb5\x91\x1c\x94\x96\x59\x6b\x53\x4b\x24\xa6\x0f\xd7\xcb\x4c\x8b\x7b\x2d\x29\xaf\x93\xde\x71\x0f\xa5\x5d\x85\x04\x65\xb8\xa7\xbd\x69\x27\xc5\x8a\xac\xd8\x0e\x2a\xa2\x09\x18\x49\x61\xdb\xd0\xb2\x81\x2d\x42\x25\xb8\x86\x92\x48\x04\xb2\xd2\xc1\xbf\x14\x5c\x09\x86\x19\x13\xb5\x43\xec\x20\x07\x6e\x18\xeb\x83\x9d\x9f\xed\x2d\xdc\x79\xfe\x4e\x00\x47\xac\x60\x2d\x24\x34\x48\x2a\x94\xca\x7d\x47\x52\x36\x40\x79\x45\x37\xb4\x32\x84\x81\x58\x3d\x62\xa9\xed\x8e\x7b\xda\x76\x8c\xae\x77\x20\x8c\xee\x8c\x33\xfd\xe9\x32\xef\x7f\xdb\xdd\x2d\xd1\x20\xd6\xae\x2e\xd9\xeb\xfe\xd0\x40\x89\xca\x94\x18\xe2\x44\xc5\xf5\xa6\xd4\xdd\xdb\x7a\x72\xdc\x8e\x6e\xcf\xfb\x60\x7e\xc2\xdd\x0c\x36\x84\x19\x9c\x01\x5d\x04\x6b\x59\x71\x5b\x9f\x70\xbb\x43\x14\xfe\xb8\x7f\xff\x2e\x53\x0e\x6a\xba\xde\x0d\x91\x1c\x32\x6b\x21\x13\x5a\x5c\x2d\xe8\x4f\xde\x9c\x31\xe4\xb5\x6e\x16\xf4\xf2\x32\xf5\x35\x78\xc2\x1d\x14\x01\x9b\x07\xba\xcc\x2c\x57\x16\x81\x1b\xcc\xe0\xe1\xaa\x33\x2d\x2c\x2a\xd0\x7f\xe2\x5c\xc6\xf4\x7d\x61\xc6\x6b\x3e\x3c\xe1\x6e\x09\x05\x3c\xb8\xe5\x65\x28\xd3\x58\xbb\xc1\x73\xe1\x8b\x67\x6f\xde\x92\x27\x94\xd8\x09\xa9\x63\x34\x29\xef\x8c\x1e\xb1\x74\x51\x9f\x70\xa7\x66\xb0\x22\x0a\x3b\x52\x63\x25\x5a\x42\xf9\xcc\xd7\xac\xc7\xb2\xcf\x38\x4e\x77\xd2\x92\x27\xca\x6b\xe8\x23\x4c\x5c\xce\xf6\x1c\x28\xe0\xbd\xe3\x43\x66\x7f\xf5\xe1\xb2\xa1\xdd\xd3\x6f\x17\xc1\x6e\x1b\x2a\x00\xbe\x04\xd6\xf8\x55\xfc\xed\xe2\x03\x5d\x7a\xdc\x8f\x22\x3a\xec\xb2\x91\x2f\x07\x34\x3b\x4e\xef\xc0\x39\x3d\x75\x20\x55\x16\x2e\x28\xfc\x6a\xc0\xce\xea\x05\x14\x2e\xa5\x93\xe9\x8c\x1a\x36\x7a\xe6\x79\x85\x0c\x35\x9e\xbc\xc1\x58\xfb\x3c\xe7\xa2\xc2\x47\x05\xa4\xeb\x40\x22\xa9\x54\xaf\x78\x1e\x5a\xeb\x72\x02\xe5\x9e\x06\x69\xe0\xcb\xf9\x99\x25\xc9\x6f\x44\x63\xc6\xc5\xd6\xc9\x8e\x17\x6c\x28\xbc\x2e\x67\x44\xd6\xea\xe1\x7a\x39\x68\x31\x13\xa4\xb2\x77\x8e\xd9\x65\x24\x1b\xb9\xe5\x17\x07\x35\xdf\xe2\xca\x9a\xa6\x69\x56\x4a\x24\x1a\x93\xb4\xbf\x87\xd5\x02\x75\x93\xe7\x35\xd5\x8d\x59\x39\x6d\x26\x92\xee\x48\xde\x35\x84\x6b\xd1\x3e\xaa\x9c\x2a\x65\x50\xe5\xd7\x57\x2f\x7f\xf8\xf1\x7f\xee\x47\x29\xda\x16\xb9\x9e\x5f\x5f\xbd\xfc\xfe\xbb\xab\xeb\xff\xbf\xb4\x67\xd9\xe3\x33\xc1\xdf\x91\x0d\xad\x89\x4d\xe8\x0e\x3f\x1a\x54\x1a\xab\xa3\x24\x67\xa0\x77\x1d\xce\x60\x4b\x19\xf3\xde\x38\x03\xcb\xfb\x41\x5f\x01\xe8\x1a\x12\x6b\x82\x17\x2f\xc0\x48\x76\x51\x78\x48\x22\x17\xfb\x19\x81\x32\x92\x2d\xe2\x95\x43\x9e\x4f\x24\x56\x54\x62\x69\x85\xd9\xd4\x8d\xef\x99\xf0\x71\xa9\x97\x4c\x28\x0f\x4b\xf8\x28\xd4\x7f\xd1\x16\x85\xd1\xc9\x34\x20\x9e\x84\x44\xa6\xb3\xeb\x74\x01\x56\xa9\x35\x82\x6e\x30\xf2\x86\x06\x25\x86\x83\x1c\x61\xf6\xae\x72\x03\x48\x77\x9e\x5f\x77\x58\x22\xdd\x1c\x22\x24\x7b\xd8\xd2\x68\xcc\x39\xd0\x14\xfd\x07\x67\x10\xd8\x3b\x0b\xda\x16\xf4\xb6\xf7\x8c\x7b\xcd\x1d\x73\xc0\xdd\x41\xfb\x4e\xb1\x33\xc4\x0f\x2d\x68\x24\x8b\x8e\x1b\x61\xb6\x15\xba\x48\x6c\x56\x69\x3a\xd4\xc4\xfe\x84\x02\xc2\x21\xd9\x4a\x54\xbb\x7b\x6b\xbb\x85\x63\xd3\x0d\x5c\x85\x10\xfb\x2f\x4d\x49\x4b\x67\xbf\x1e\xb5\x6c\xf4\x08\x89\x3d\x6c\x32\x49\x70\x4b\x2d\x69\x5c\x66\xf0\x33\x5c\x45\xd9\xf5\x29\x8f\xcd\x1d\x36\x2c\x23\x1f\x80\x2f\xac\x87\x97\xd2\x09\x97\xac\x14\x86\xdb\x46\xbe\xfa\x86\xdf\x6a\xa7\xdd\xd3\x6b\xf4\xdb\x87\x2f\x5f\x3f\xf6\xb2\x80\xeb\xc1\x3f\x1f\x9b\x13\x18\x45\x75\x01\x4a\xd8\x87\x87\x42\xb4\x85\xd5\xb6\x35\x7b\xbd\xf6\x7c\x00\xaa\x80\x6c\x08\x65\x64\xc5\x06\x5e\x46\x0a\xff\xf5\x21\x1b\x50\x3b\x1a\xb3\x99\x16\x6f\xc5\x16\xe5\xaf\xc4\xb6\x8c\x15\xdd\xc9\x61\xe0\x49\x7a\xd0\xa6\x9e\x16\x1d\x91\x0a\xdf\x70\x9d\x1c\xcf\xe5\xf4\xa0\x75\x57\x12\xc9\x53\x64\xd9\x47\x40\x9d\x82\xaa\x47\xf6\xb2\x70\xe1\x22\xb4\x14\xd9\xf4\x1d\xca\x88\xd2\x76\x67\x27\xb8\xc2\xa1\x57\x3a\x94\x8e\x61\xa7\x8e\x1e\xfb\x2a\xee\xa7\xd0\xdc\x7d\x5a\xf6\x09\xc6\x90\x6b\xb6\x03\x5a\x73\x21\x11\x1e\x15\xa0\x94\x51\xdf\xbf\x92\x52\xc8\xb8\xd9\x5b\x55\xcf\x40\x4b\x52\xa2\x17\xb6\x7d\xac\x13\x1d\xf2\x20\x37\xb3\x61\x0f\x24\x4a\x13\x6d\x46\x25\xb4\x7d\xdf\xbf\x17\xa2\x66\xe8\x7d\xe0\xa2\x28\x60\xaa\x4c\x59\xa2\x52\xd3\x48\x3b\xe3\x46\x9b\x3e\x4f\xd0\xe6\x35\xb9\x81\xc9\xef\xbf\xbc\x79\x3b\xd9\x0f\x6f\xe4\x3d\x20\x53\x38\x6e\x3b\x1c\x54\x30\x07\x7d\xa4\x2b\x9f\x9d\xfd\x56\x90\xca\x3e\x55\x34\x6d\x11\xa6\x70\x09\x1a\x2e\x61\x0a\xad\xc2\x72\x3a\x56\xdd\x3f\x51\x0f\xba\xac\xb7\x1d\x4d\xf7\x1e\x18\xb4\xa4\xb1\x43\x6c\xc4\xe4\x68\x2e\xf8\xc7\x59\x25\x4a\x63\x27\x55\xc6\x44\xe9\x66\xd2\x30\xfd\xc7\xe6\x4b\x17\x23\xab\x7c\xcc\xf8\x1f\xd2\xf0\x7d\xd8\x31\xbe\xed\x92\xde\x3f\x8d\xb8\x76\x42\x58\xbd\xf3\x91\xe8\xf9\x56\xce\xf0\x13\xd5\xe1\x2f\xc7\xf0\x34\xf8\x6c\xe8\x2c\xce\xcf\xfe\x0b\x00\x00\xff\xff\x78\x97\xb6\x17\xd4\x0d\x00\x00"

func assetsResourcefinderJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcefinderJs,
		"assets/resourcefinder.js",
	)
}

func assetsResourcefinderJs() (*asset, error) {
	bytes, err := assetsResourcefinderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resourcefinder.js", size: 3540, mode: os.FileMode(438), modTime: time.Unix(1562324711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cnamechain.json": assetsCnamechainJson,
	"assets/resourcefinder.js": assetsResourcefinderJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"cnamechain.json": &bintree{assetsCnamechainJson, map[string]*bintree{}},
		"resourcefinder.js": &bintree{assetsResourcefinderJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

